{"version":3,"names":["EditingMode","SearchType","NonLetter","isInprogress","piece","InProgress","last","arr","length","undefined","Existing","constructor","offset","modified","myType","this","self","splitAt","position","left","makeNew","mOffset","right","mLength","isContinuedBy","other","editNum","join","isSelf","pieces","Array","isArray","Original","super","Added","type","consumption","index","content","EditController","parent","added","Uint8Array","undoStack","redoStack","chunk","original","file","window","rollback","console","log","initEdit","inProgress","targetIndex","targetSlicePoint","target","getPieceAtOffset","splitParts","toInsert","splice","push","tracker","i","entries","isInProgress","modifyNextPiece","amount","lastConsumption","consumed","nextPiece","startMod","find","searchArr","from","maxLength","results","myChunk","render","out","inf","j","searchIdx","lastIndexOf","redo","neighbor","toAdd","pop","idx","indexOf","partialConsume","lp","isNaN","forceUpdate","undo","commit","targetIdx","lastMod","NaN","restored","partiallyConsumed","t","backSpace","setCursorPosition","cursor","buildEdit","keyStroke","key","metaKey","ctrlKey","ASCII","BYTE","includes","editingMode","editType","test","charCodeAt","parseInt","BIT","bit","newArr","set","newAddedPiece","chopLength","subarray","p1","p2","start","meta","startPlace","startIndex","firstChunk","getPieceBuffer","lengthCheck","save","floatToBin","value","size","endianness","exponentBitCount","sign","Math","abs","fullNum","floor","decimal","decMantissaLimit","toString","decMantissa","rounding","substring","charAt","exponent","pow","match","expBin","padStart","fullBin","padEnd","reverse","fill","hexEditorCss","HexEditor","wheel","evt","preventDefault","scaledVelocity","Number","isInteger","deltaY","ceil","shiftKey","maxLines","document","getElementById","setAttribute","lineNumber","editController","bytesPerLine","handleRegionKeyDown","DOT","ln","n","componentWillLoad","map","_","regionScaleWidth","regionScaleHeight","componentDidLoad","hexLoaded","emit","async","fileMetadata","reader","FileReader","readAsArrayBuffer","onload","event","result","newLineNumber","hexLineChanged","newCursorPosition","adjustMain","hexCursorChanged","byte","newSelection","selection","Object","assign","hexSelectionChanged","location","text","searchType","range","searchByteCount","searchEndian","formatSearch","e","searchResults","buildHexView","bytesPerGroup","bitsPerGroup","asciiInline","chunkData","addedRanges","lines","binViews","lineViews","charViews","selectedLine","lineNum","line","base","binLines","charLines","hexLines","ascii","nonDisplayCharacter","documentElement","style","setProperty","nonDisplayOpacity","val","values","classList","String","fromCharCode","toUpperCase","startsWith","end","binArr","split","binSpans","displayBin","binClass","startBit","endBit","h","class","displayAscii","displayHex","pointerEvents","lineLabels","binRegionMarkers","hexRegionMarkers","asciiRegionMarkers","buildRegion","region","depth","subRegions","regionDepth","r","s","l","getColor","genPolygon","width","height","onMouseMove","getAttribute","canUpdateMouseMove","clientX","clientY","JSON","stringify","sr","name","setTimeout","onMouseLeave","onClick","_c","_b","_a","getSelection","anchorNode","parentElement","tagName","empty","points","color","stroke","regions","binRegions","viewBox","hexRegions","asciiRegions","buildChunks","chunks","chunkOffset","chunkLineOffs","lNum","acc","renderedChunks","lineCount","startLine","actualStart","actualEnd","rendered","data","endLine","lineStart","hexLine","charLine","binLine","k","horizOffset","startByte","max","endByte","min","vertOffset","edit","className","evtArrowKeyConditions","ArrowDown","ArrowUp","ArrowRight","ArrowLeft","setLineNumber","setSelection","searchActive","Error","INTEGER","v","FLOAT","parseFloat","replace","ch","executeSearch","searchInput","showHex","searchHexDisplay","message","jumpToResult","onChange","onMouseEnter","_toggleScrollListener","onMouseDown","beginSelection","onMouseUp","endSelection","tabindex","onKeyDown","id","visibility","padding","top","display","mode","zIndex","findInSelection","showChunks","parentClassName","tempSelection","composedPath","chosen","hexDataChanged","displayAsChunks","addEventListener","passive","removeEventListener","tooltipCss","Tooltip","parse","simpleText"],"sources":["./src/components/hex-editor/interfaces.ts","./src/components/hex-editor/editController.tsx","./src/components/hex-editor/floatConverter.ts","./src/components/hex-editor/hex-editor.css?tag=hex-editor","./src/components/hex-editor/hex-editor.tsx","./src/components/tooltip/tooltip.css?tag=hex-tooltip","./src/components/tooltip/tooltip.tsx"],"sourcesContent":["export interface IRegion {\r\n  start: number;\r\n  end: number;\r\n  name?: string;\r\n  description?: string;\r\n  color?: string;\r\n  subRegions?: IRegion[];\r\n}\r\n\r\nexport enum EditingMode {\r\n  ASCII,\r\n  BYTE,\r\n  BIT\r\n}\r\nexport enum SearchType {\r\n  ASCII,\r\n  BYTE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\nexport enum NonLetter {\r\n  DOT = \"\\u2022\",\r\n  CROSS = \"\\u2573\",\r\n  FULL_BLOCK = \"\\u2588\",\r\n  LIGHT_SHADE = \"\\u2591\",\r\n  MEDIUM_SHADE = \"\\u2592\",\r\n  DARK_SHADE = \"\\u2593\",\r\n  DASH = \"-\",\r\n  PLUS = \"+\"\r\n}\r\n\r\nexport type Endianness = 'big' | 'little';","import { HexEditor } from './hex-editor';\r\nimport { forceUpdate } from '@stencil/core';\r\nimport { EditingMode } from './interfaces';\r\n\r\ntype editType = \"insert\" | \"overwrite\";\r\n// type piece = {offset: number, length: number, source: \"origin\", editNum: 0};\r\n// type addedPiece = {offset: number, type: editType, length: number, source: \"added\", editNum: number};\r\n// type inprogress = {offset: number, type: editType, length: number, source: \"inprogress\", index: number, content: number[], editNum: number};\r\ntype anyPiece = Original | Added | InProgress;\r\ntype existingPiece = Existing;\r\n\r\nfunction isInprogress(piece: anyPiece): piece is InProgress {\r\n  if (piece instanceof InProgress) return true;\r\n  else return false;\r\n}\r\n\r\nfunction last<T>(arr: T[]) {\r\n  if (arr.length > 0) return arr[arr.length - 1];\r\n  return undefined;\r\n}\r\n\r\nabstract class Existing {\r\n  public editNum: number;\r\n  public self: Existing | Existing[];\r\n\r\n  constructor(\r\n    public offset: number,\r\n    public length: number,\r\n    public modified: number = 0,\r\n    private myType: typeof Original | typeof Added\r\n  ) {\r\n    this.self = this;\r\n  }\r\n\r\n  abstract makeNew(offset: number, length: number, modified?: number): Existing\r\n\r\n  splitAt(position: number) {\r\n    const left = this.makeNew(this.mOffset, position);\r\n    const right = this.makeNew(this.offset + position, this.length - position, this.modified)\r\n    if (left.length === 0) {\r\n      this.self = [right];\r\n      return [undefined, right];\r\n    }\r\n    if (right.mLength === 0) {\r\n      this.self = [left];\r\n      return [left, undefined];\r\n    }\r\n    return (this.self = [ left, right ])\r\n  }\r\n\r\n  isContinuedBy(other: this): other is this {\r\n    if (other instanceof this.myType) {\r\n      return this.mLength + this.mOffset === other.mOffset && this.editNum === other.editNum\r\n    }\r\n    return false;\r\n  }\r\n\r\n  join(other: this) {\r\n    return (this.self = this.makeNew(this.mOffset, this.mLength + other.mLength));\r\n  }\r\n\r\n  get isSelf() { return this === this.self }\r\n  get mOffset() { return this.offset + this.modified }\r\n  get mLength() { return this.length - this.modified }\r\n  get pieces() {\r\n    if (Array.isArray(this.self)) {\r\n      if (this.self.length === 1) return [...this.self[0].pieces]\r\n      return [...this.self[0].pieces, ...this.self[1].pieces]\r\n    }\r\n    return [this.self];\r\n  }\r\n}\r\n\r\nclass Original extends Existing {\r\n  constructor(\r\n    offset: number,\r\n    length: number,\r\n    modified: number = 0\r\n  ) {\r\n    super(offset, length, modified, Original);\r\n  }\r\n\r\n  makeNew(offset: number, length: number, modified?: number): Original {\r\n    return new Original(offset, length, modified);\r\n  }\r\n}\r\n\r\nclass Added extends Existing {\r\n  public self: Added | Added[];\r\n\r\n  constructor(\r\n    offset: number,\r\n    length: number,\r\n    public type: editType,\r\n    public editNum: number,\r\n    public consumption: {startMod: number, consumed: boolean, piece: existingPiece}[] = [],\r\n    modified: number = 0\r\n  ){\r\n    super(offset, length, modified, Added);\r\n  }\r\n\r\n  makeNew(offset: number, length: number, modified?: number): Added {\r\n    return new Added(offset, length, this.type, this.editNum, this.consumption, modified);\r\n  }\r\n}\r\n\r\nclass InProgress {\r\n  public content: number[] = []\r\n  public consumption: {startMod: number, consumed: boolean, piece: existingPiece}[] = [];\r\n\r\n  constructor(\r\n    public offset: number,\r\n    public type: editType,\r\n    public editNum: number,\r\n    public index: number,\r\n  ) {}\r\n\r\n  get length() { return this.content.length }\r\n  get modified() { return 0 }\r\n  get mLength() { return this.length }\r\n  get mOffset() { return this.offset }\r\n  get pieces() { return [this] }\r\n}\r\n\r\n/**\r\n * controls the editing of values in the hex editor\r\n */\r\nexport class EditController {\r\n  original: Uint8Array;\r\n  added: Uint8Array = new Uint8Array();\r\n  pieces: Array<anyPiece> = [];\r\n  undoStack: Array<anyPiece> = [];\r\n  redoStack: Array<[Existing, number, anyPiece]> = [];\r\n  inProgress: InProgress;\r\n  chunk: string = '';\r\n\r\n  constructor(\r\n    private parent: HexEditor\r\n  ) {\r\n    this.original = parent.file;\r\n    this.pieces = [new Original(0, this.original.length)]\r\n    window['rollback'] = () => {\r\n      this.rollback();\r\n      console.log(this.pieces);\r\n    }\r\n    window['ec'] = this;\r\n  }\r\n\r\n  initEdit(offset: number, type: editType) {\r\n    if (this.redoStack.length > 0) this.rollback();\r\n    this.inProgress = new InProgress(this.added.length, type, this.undoStack.length + 1, -1)\r\n\r\n    let {targetIndex, targetSlicePoint, target} = this.getPieceAtOffset(offset)\r\n    if (target instanceof Existing) {\r\n      const splitParts = target.splitAt(targetSlicePoint);\r\n      let toInsert;\r\n      if (!splitParts[0]) {\r\n        this.inProgress.index = targetIndex;\r\n        toInsert = [this.inProgress, splitParts[1]]\r\n      } else if (!splitParts[1]) {\r\n        this.inProgress.index = targetIndex + 1;\r\n        toInsert = [splitParts[0], this.inProgress]\r\n      } else {\r\n        this.inProgress.index = targetIndex + 1;\r\n        toInsert = [\r\n          splitParts[0],\r\n          this.inProgress,\r\n          splitParts[1]\r\n        ];\r\n      }\r\n\r\n\r\n      this.pieces.splice(targetIndex, 1, ...toInsert);\r\n    }\r\n\r\n    this.undoStack.push(this.inProgress);\r\n  }\r\n\r\n  /**\r\n   * gets the piece at an offset\r\n   * @param offset\r\n   */\r\n  getPieceAtOffset(offset: number): {targetSlicePoint: number, targetIndex: number, target: existingPiece} {\r\n    let tracker = 0;\r\n    let targetSlicePoint: number;\r\n    let targetIndex: number;\r\n    let target: existingPiece;\r\n    for (const [i, piece] of (this.pieces as existingPiece[]).entries()) {\r\n      tracker += piece.mLength;\r\n      if (tracker >= offset) {\r\n        targetSlicePoint = piece.mLength - tracker + offset;\r\n        targetIndex = i;\r\n        target = piece;\r\n        break;\r\n      }\r\n    }\r\n    return {\r\n      targetSlicePoint,\r\n      targetIndex,\r\n      target\r\n    }\r\n  }\r\n\r\n  get isInProgress() { return !!this.inProgress }\r\n\r\n  /**\r\n   * targets the piece next to the inProgress piece, if it exists, and\r\n   * modifies its length/offset by amount if the inProgress type is\r\n   * set to 'overwrite'.\r\n   *\r\n   * @param amount - the amount to modify the target piece's length by\r\n   */\r\n  modifyNextPiece(amount: number, index: number, piece?: Added) {\r\n    const target = piece ? piece : this.inProgress;\r\n    if (index !== this.pieces.length - 1) {\r\n      let lastConsumption = last(target.consumption);\r\n      if (lastConsumption === undefined || lastConsumption.consumed) {\r\n        const nextPiece = (this.pieces as existingPiece[])[index + 1];\r\n        lastConsumption = {\r\n          consumed: false,\r\n          piece: nextPiece,\r\n          startMod: nextPiece.modified\r\n        };\r\n        target.consumption.push(lastConsumption)\r\n      }\r\n\r\n      lastConsumption.piece.modified -= amount;\r\n      if (lastConsumption.piece.mLength === 0) {\r\n        lastConsumption.consumed = true;\r\n\r\n        this.pieces.splice(index + 1, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  find(searchArr: number[], from: number, maxLength?: number) {\r\n    // Boyer-Moore string search algorithm:\r\n    // https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string-search_algorithm\r\n\r\n    const results = [];\r\n\r\n    let myChunk = this.render(from, maxLength ? maxLength : this.length - from).out;\r\n    let inf = 0;\r\n    for (let i = searchArr.length; i < myChunk.length; i++) {\r\n      if (myChunk[i] === searchArr[searchArr.length - 1]) {\r\n        for (let j = searchArr.length - 1; j >= 0; j--) {\r\n          if (j === 0) {\r\n            results.push(i + from - searchArr.length + 1);\r\n            break;\r\n          }\r\n          if (myChunk[i - (searchArr.length - j)] !== searchArr[j - 1]) {\r\n            i += (j - 1);\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        const searchIdx = searchArr.lastIndexOf(myChunk[i]);\r\n\r\n        if (searchIdx === -1) i += searchArr.length - 1;\r\n        else {\r\n          i += searchArr.length - searchIdx - 2;\r\n        }\r\n      }\r\n      // JUUUST to be sure there's no infinite loop\r\n      inf++\r\n      if (inf > 100000) break;\r\n    }\r\n\r\n\r\n    return results;\r\n  }\r\n\r\n  redo() {\r\n    if (this.redoStack.length > 0) {\r\n      const [neighbor, startMod, toAdd] = this.redoStack.pop() as [Existing, number, Added];\r\n      const idx = this.pieces.indexOf(neighbor);\r\n      // console.log(idx);\r\n\r\n      if (toAdd.type === 'insert') {\r\n        this.pieces.splice(idx, 0, ...toAdd.pieces);\r\n      } else {\r\n        let partialConsume = 0;\r\n        let lp = last(toAdd.consumption);\r\n        if (!lp.consumed) partialConsume = 1;\r\n        if (!isNaN(startMod)) {\r\n          if (!lp.piece.isSelf) {\r\n            lp.piece.pieces[0].modified = startMod;\r\n          } else {\r\n            lp.piece.modified = startMod;\r\n          }\r\n        }\r\n        this.pieces.splice(idx, toAdd.consumption.length - partialConsume, ...toAdd.pieces);\r\n      }\r\n\r\n      this.undoStack.push(toAdd);\r\n      forceUpdate(this.parent);\r\n\r\n    }\r\n  }\r\n\r\n  undo() {\r\n    if (this.isInProgress) {\r\n      this.commit();\r\n      this.chunk = '';\r\n    }\r\n    if (this.undoStack.length > 0) {\r\n\r\n      // get the latest undo\r\n      const target = this.undoStack.pop();\r\n\r\n      // get the first piece of that undo step\r\n      const targetIdx = this.pieces.indexOf(target.pieces[0]);\r\n      let neighbor;\r\n      let lastMod = NaN;\r\n\r\n      // determine type of operation\r\n      if (target instanceof Added && target.type === 'overwrite') {\r\n        // if type was overwrite, then there are more steps necessary\r\n        // due to the potential to consume other pieces,\r\n        // all of which will need to be restored\r\n\r\n\r\n        // restore all pieces that have been FULLY consumed\r\n        // store those that have only been partially consumed\r\n        const restored = [];\r\n        const partiallyConsumed: (typeof Added.prototype.consumption) = []\r\n        for (const t of target.consumption) {\r\n          if (t.consumed) {\r\n            t.piece.modified = t.startMod\r\n            restored.push(t.piece)\r\n          } else {\r\n            partiallyConsumed.push(t);\r\n          }\r\n        }\r\n\r\n        // put restored pieces back while removing target\r\n        this.pieces.splice(targetIdx, target.pieces.length, ...restored)\r\n\r\n        // store the neighbor\r\n        neighbor = this.pieces[targetIdx];\r\n\r\n        // due to not \"rolling back\" every undo, the stored piece might actually be multiple\r\n        // pieces. This is kept track of with the piece's 'self' variable.\r\n        if (partiallyConsumed.length) {\r\n          // store the modified value of the partially consumed piece for redo\r\n          if (!partiallyConsumed[0].piece.isSelf) {\r\n            const pieces = partiallyConsumed[0].piece.pieces;\r\n\r\n            // we only need to modify the first one because the others should have been\r\n            // taken care of by other undo operations (in theory)\r\n            lastMod = pieces[0].modified;\r\n            pieces[0].modified = partiallyConsumed[0].startMod - partiallyConsumed[0].piece.modified;\r\n          } else {\r\n            lastMod = partiallyConsumed[0].piece.modified;\r\n            partiallyConsumed[0].piece.modified = partiallyConsumed[0].startMod;\r\n          }\r\n        }\r\n\r\n      } else {\r\n        // if the type was insert then the piece can simply be extracted without issue\r\n        this.pieces.splice(targetIdx, target.pieces.length);\r\n        // store the neighbor\r\n        neighbor = this.pieces[targetIdx];\r\n      }\r\n\r\n\r\n      this.redoStack.push([neighbor as Existing, lastMod, target]);\r\n      forceUpdate(this.parent);\r\n    }\r\n\r\n  }\r\n\r\n  // pressing backspace will be handled differently depending on:\r\n  // whether something is in-progress, and whether the editingMode of the\r\n  // parent is 'byte'/'ascii' or 'bit'\r\n  backSpace() {\r\n    if (this.inProgress) {\r\n      this.chunk = '';\r\n      this.inProgress.content.pop();\r\n      this.parent.setCursorPosition(this.parent.cursor - 1);\r\n      this.modifyNextPiece(1, this.inProgress.index)\r\n    }\r\n    else if (this.parent.editingMode === EditingMode.BIT) {\r\n\r\n    }\r\n    else {\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * builds the edit\r\n   *\r\n   * @param {KeyboardEvent} keyStroke\r\n   * @memberof EditController\r\n   */\r\n  buildEdit(keyStroke: KeyboardEvent) {\r\n    if (!this.parent.cursor || this.parent.cursor === -1) return;\r\n    if (keyStroke.key === 'Z' && (keyStroke.metaKey || keyStroke.ctrlKey)) {\r\n      this.redo()\r\n      return;\r\n    }\r\n    if (keyStroke.key === 'z' && (keyStroke.metaKey || keyStroke.ctrlKey)) {\r\n      this.undo()\r\n      return;\r\n    }\r\n    if (keyStroke.key === 'Backspace') {\r\n      this.backSpace();\r\n      return;\r\n    }\r\n\r\n    // ascii and byte modes are effectively the same in terms of editing\r\n    // binary editing is very different, so it is handled in the else statement\r\n    if ([EditingMode.ASCII, EditingMode.BYTE].includes(this.parent.editingMode)) {\r\n      if (!this.isInProgress)\r\n          this.initEdit(this.parent.cursor, this.parent.editType as editType);\r\n\r\n      if (this.parent.editingMode === EditingMode.ASCII && keyStroke.key.length === 1 && /[\\u0000-\\u00FF]/.test(keyStroke.key)) {\r\n        this.inProgress.content.push(keyStroke.key.charCodeAt(0));\r\n        this.parent.setCursorPosition(this.parent.cursor + 1);\r\n        if (this.inProgress.type === 'overwrite') this.modifyNextPiece(-1, this.inProgress.index);\r\n      }\r\n      else if (this.parent.editingMode === EditingMode.BYTE && /^[a-fA-F0-9]$/.test(keyStroke.key)) {\r\n        this.chunk += keyStroke.key;\r\n        if (this.chunk.length === 2) {\r\n          this.inProgress.content.push(parseInt(this.chunk, 16));\r\n          this.chunk = '';\r\n          this.parent.setCursorPosition(this.parent.cursor + 1);\r\n          if (this.inProgress.type === 'overwrite') this.modifyNextPiece(-1, this.inProgress.index);\r\n        }\r\n      }\r\n    }\r\n    // valid binary editing commands are 0, 1, and Enter\r\n    else if (this.parent.editingMode === EditingMode.BIT && ['0', '1', 'Enter'].includes(keyStroke.key)) {\r\n      if (keyStroke.key === 'Enter') {\r\n        // enter inserts a blank byte\r\n        this.initEdit(this.parent.cursor, 'insert');\r\n        this.inProgress.content.push(0);;\r\n        this.commit();\r\n        forceUpdate(this.parent);\r\n      }\r\n      else {\r\n        if (!this.isInProgress)\r\n          this.initEdit(this.parent.cursor, 'overwrite');\r\n\r\n        this.parent.setCursorPosition(this.parent.cursor, this.parent.bit + 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  commit() {\r\n    const newArr = new Uint8Array(this.added.length + this.inProgress.content.length);\r\n    newArr.set(this.added, 0);\r\n    newArr.set(this.inProgress.content, this.added.length);\r\n\r\n    const newAddedPiece = new Added(\r\n      newArr.length - this.inProgress.length,\r\n      this.inProgress.length,\r\n      this.inProgress.type,\r\n      this.inProgress.editNum,\r\n      this.inProgress.consumption\r\n    );\r\n    this.pieces[this.inProgress.index] = newAddedPiece;\r\n\r\n    this.undoStack[this.undoStack.length - 1] = newAddedPiece;\r\n    this.added = newArr;\r\n    this.inProgress = null;\r\n    this.chunk = '';\r\n  }\r\n\r\n  rollback() {\r\n    let chopLength = 0;\r\n    while(this.redoStack.length > 0) {\r\n      chopLength += this.redoStack.pop()[2].length\r\n    }\r\n\r\n    let newArr = new Uint8Array(this.added.length - chopLength);\r\n    newArr.set(this.added.subarray(0, newArr.length), 0);\r\n    this.added = newArr;\r\n\r\n    for (let i = 0; i < this.pieces.length - 1; i++) {\r\n      const p1 = this.pieces[i] as existingPiece;\r\n      const p2 = this.pieces[i + 1] as existingPiece;\r\n      if (p1.isContinuedBy(p2)) {\r\n        this.pieces.splice(i, 2, p1.join(p2 as any));\r\n        i--;\r\n      }\r\n    }\r\n  }\r\n\r\n  render(start: number, length: number) {\r\n    let out = new Uint8Array(length);\r\n    let meta: {added: [number, number][]} = {added: []}\r\n\r\n    let tracker = 0;\r\n    let startPlace: number;\r\n    let startIndex: number = 0;\r\n    for (const [i, piece] of this.pieces.entries()) {\r\n      tracker += piece.mLength;\r\n      if (tracker >= start) {\r\n        startPlace = piece.mLength - tracker + start;\r\n        startIndex = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (isInprogress(this.pieces[startIndex]) || this.pieces[startIndex] instanceof Added) {\r\n      meta.added.push([start - startPlace, start - startPlace + this.pieces[startIndex].length]);\r\n    }\r\n\r\n    let firstChunk = this.getPieceBuffer(this.pieces[startIndex]).subarray(startPlace, startPlace + length);\r\n    tracker = firstChunk.length;\r\n    out.set(firstChunk, 0);\r\n    for (let i = startIndex + 1; i < this.pieces.length; i++) {\r\n      let piece = this.pieces[i];\r\n      tracker += piece.mLength;\r\n      if (isInprogress(piece) || piece instanceof Added) {\r\n        meta.added.push([start + tracker - piece.mLength, start + tracker]);\r\n      }\r\n      if (tracker >= length) {\r\n        out.set(this.getPieceBuffer(piece).subarray(0, piece.mLength - tracker + length), tracker - piece.mLength);\r\n        break;\r\n      }\r\n      out.set(this.getPieceBuffer(piece), tracker - piece.mLength);\r\n    }\r\n\r\n    if (tracker !== length) {\r\n      return {\r\n        out: out.subarray(0, tracker),\r\n        meta\r\n      }\r\n    }\r\n    return {\r\n      out,\r\n      meta\r\n    };\r\n  }\r\n\r\n  get length() {\r\n    let lengthCheck = 0;\r\n    for (const piece of this.pieces) {\r\n      lengthCheck += piece.length;\r\n    }\r\n    return lengthCheck;\r\n  }\r\n\r\n  save() {\r\n    return this.render(0, this.length).out;\r\n  }\r\n\r\n  private getPieceBuffer(piece: anyPiece) {\r\n    if (isInprogress(piece)) {\r\n      return new Uint8Array(piece.content);\r\n    }\r\n    // implied else\r\n    if (piece instanceof Original) {\r\n      return this.original.subarray(piece.mOffset, piece.mOffset+piece.mLength);\r\n    } else {\r\n      return this.added.subarray(piece.mOffset, piece.mOffset+piece.mLength);\r\n    }\r\n\r\n  }\r\n}\r\n","export function floatToBin(value: number, size: 1 | 2 | 4 | 8, endianness: 'big' | 'little'): number[] {\r\n  let exponentBitCount;\r\n  switch(size) {\r\n    case 1: exponentBitCount = 4; break;\r\n    case 2: exponentBitCount = 5; break;\r\n    case 4: exponentBitCount = 8; break;\r\n    case 8: exponentBitCount = 11; break;\r\n    //case 128: exponentBitCount = 15; break;\r\n    //case 256: exponentBitCount = 19; break;\r\n    default:\r\n      return;\r\n  }\r\n\r\n  let sign = (value < 0) ? 1 : 0;\r\n\r\n  value = Math.abs(value);\r\n\r\n  let fullNum = Math.floor(value);\r\n  let decimal = value - fullNum;\r\n  let decMantissaLimit = ((size * 8) - 1 - exponentBitCount) - fullNum.toString(2).length + 3;\r\n  let decMantissa = '';\r\n\r\n  for (let i = 0; i < decMantissaLimit; i ++) {\r\n    decimal *= 2;\r\n    decMantissa += Math.floor(decimal);\r\n    if (decimal >= 1) decimal -= 1;\r\n  }\r\n\r\n  let rounding = decMantissa.substring(decMantissa.length - 2);\r\n  decMantissa = decMantissa.substring(0, decMantissa.length - 2);\r\n\r\n  console.log(decMantissa, rounding);\r\n  if (rounding.charAt(0) === '1') {\r\n    decMantissa = (parseInt(decMantissa, 2) + 1).toString(2);\r\n    if (/^10+$/.test(decMantissa)) {\r\n      fullNum += 1;\r\n      decMantissa = '';\r\n    }\r\n  }\r\n  let exponent = fullNum.toString(2).length - 1 + (Math.pow(2, exponentBitCount) / 2 - 1);\r\n  if (fullNum === 0) {\r\n    if (decMantissa === '') exponent = 0;\r\n    else exponent = (Math.pow(2, exponentBitCount) / 2 - 1) - decMantissa.match(/^(0*)/)![0].length - 1;\r\n  }\r\n  let expBin = exponent.toString(2).padStart(exponentBitCount, '0');\r\n\r\n  let fullBin = sign +\r\n  expBin +\r\n  (fullNum.toString(2) + decMantissa).padEnd(((size * 8) - 1 - exponentBitCount) - fullNum.toString(2).length, '0').substring(1);\r\n\r\n  console.log(sign, expBin, (fullNum.toString(2) + decMantissa).padEnd(((size * 8) - 1 - exponentBitCount) - fullNum.toString(2).length, '0').substring(1));\r\n  let out = [];\r\n  for (let i = 0; i < (size * 8); i += 8) {\r\n    out.push(parseInt(fullBin.substring(i, i+8), 2));\r\n  }\r\n\r\n  if (endianness === 'little') out.reverse();\r\n  if (value === 0) out.fill(0);\r\n\r\n  return out;\r\n}\r\n",".fudgedit-container {\r\n  overflow: hidden;\r\n  position: relative;\r\n  min-height: 100%;\r\n  color: black;\r\n  user-select: none;\r\n}\r\n\r\n.overlay {\r\n  height: 100%;\r\n  width: 100%;\r\n  position: absolute;\r\n  background-color: #f008;\r\n  overflow-y: scroll;\r\n  /* scroll-margin: 5; */\r\n  z-index: 4;\r\n  pointer-events: none;\r\n}\r\n.overlay::-webkit-scrollbar {\r\n  pointer-events: all;\r\n  width: 100%;\r\n}\r\n.overlay > .forceScroll {\r\n  height: 200%;\r\n  width: 100%;\r\n  position: absolute;\r\n}\r\n\r\n.hex {\r\n  font-family: 'Sourcecode Pro', Courier, monospace;\r\n  font-size: 15px;\r\n  outline: none;\r\n}\r\n\r\n.binView,\r\n.hexView,\r\n.asciiView,\r\n.lineLabels {\r\n  display: inline-block;\r\n  padding: 0 10px;\r\n  white-space: pre;\r\n  position: relative;\r\n}\r\n\r\n.binLine span,\r\n.hexLine span,\r\n.charLine span {\r\n  position: relative;\r\n  height: 17px;\r\n  display: inline-block;\r\n}\r\n\r\n.binLine,\r\n.hexLine,\r\n.charLine,\r\n.lineLabel {\r\n  height: 17px;\r\n}\r\n\r\n.binLine > span > span {\r\n  position: relative;\r\n  width: 14px;\r\n  padding: 0 3px;\r\n  box-sizing: border-box;\r\n}\r\n.binLine span {\r\n  padding: 0 0px;\r\n}\r\n.binLine > span > span.padBit::after {\r\n  /* padding-right: 15px; */\r\n  background-color: #0006;\r\n  position: absolute;\r\n  width: 1px;\r\n  height: 100%;\r\n  left: calc(100% + 0.5px);\r\n  content: '';\r\n}\r\n.binLine > span > span:last-child.padBit::after {\r\n  /* padding-right: 15px; */\r\n  width: 2px;\r\n  left: 100%\r\n}\r\n.binLine > span:last-child > span:last-child.padBit::after {\r\n  display: none\r\n}\r\n\r\n.charLine span {\r\n  width: 10px;\r\n}\r\n\r\n.charLine > span.nonDisplay {\r\n  opacity: var(--nd-opacity);\r\n}\r\n\r\n.hexLine span {\r\n  position: relative;\r\n  padding: 0 5px;\r\n  width: 28px;\r\n  box-sizing: border-box;\r\n}\r\n.hexLine span:not(:last-child).padByte::after {\r\n  /* padding-right: 15px; */\r\n  background-color: #0006;\r\n  position: absolute;\r\n  width: 2px;\r\n  height: 100%;\r\n  left: calc(100% - 1px);\r\n  content: '';\r\n}\r\n\r\n.binLine span,\r\n.hexLine span {\r\n  cursor: default;\r\n  user-select: none;\r\n}\r\n\r\n.binLine span.selected,\r\n.charLine span.selected,\r\n.hexLine span.selected {\r\n  background-color: #8888FF80;\r\n}\r\n\r\n.binLine span.cursor,\r\n.charLine span.cursor,\r\n.hexLine span.cursor {\r\n  background-color: #008;\r\n  color: #FFF;\r\n}\r\n\r\n.binLine > span.added,\r\n.charLine span.added,\r\n.hexLine span.added {\r\n  color: red;\r\n}\r\n\r\n.binLine > span > span:hover,\r\n.charLine span:hover,\r\n.hexLine span:hover {\r\n  background-color: #000;\r\n  color: #FFF;\r\n}\r\n\r\n.hexLine span.ASCII {\r\n  font-weight: bold;\r\n}\r\n\r\n.binLine:nth-child(2n-1),\r\n.hexLine:nth-child(2n-1),\r\n.charLine:nth-child(2n-1),\r\n.lineLabel:nth-child(2n-1) {\r\n  background-color: #EEFFFF;\r\n}\r\n\r\n.binLine.selected,\r\n.charLine.selected,\r\n.hexLine.selected,\r\n.lineLabel.selected {\r\n  background-color: #FFA;\r\n}\r\n\r\n.separator {\r\n  opacity: 0;\r\n  pointer-events: none;\r\n}\r\n\r\n.region { opacity: 1; }\r\n\r\n.highlight { mix-blend-mode: multiply; }\r\n\r\n.region {\r\n  position: relative;\r\n}\r\n\r\n.highlight:hover  .region:not(:hover) {\r\n  fill: #0003;\r\n}\r\n\r\n.find {\r\n  width: calc(100% - 20px);\r\n  height: 50px;\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  margin: auto;\r\n  background-color: #fff;\r\n  z-index: 4;\r\n}","import { Component, State, Prop, Method, Event, EventEmitter, h, forceUpdate } from '@stencil/core';\r\nimport { EditController } from './editController';\r\nimport { EditingMode, Endianness, IRegion, SearchType, NonLetter } from './interfaces';\r\nimport { floatToBin } from './floatConverter';\r\n\r\n@Component({\r\n  tag: 'hex-editor',\r\n  styleUrl: 'hex-editor.css',\r\n  shadow: false\r\n})\r\nexport class HexEditor {\r\n  // SECTION OWN PROPERTIES\r\n\r\n  editController: EditController;\r\n  regionScaleWidth: number;\r\n  regionScaleHeight: number;\r\n  canUpdateMouseMove: boolean;\r\n\r\n  // !SECTION OWN INTERNAL PROPERTIES\r\n\r\n  // SECTION STATE\r\n\r\n  /**\r\n   * contains metadata of the given file\r\n   * @type {File}\r\n   * @memberof HexEditor\r\n   */\r\n  @State() fileMetadata: File;\r\n\r\n  /**\r\n   * the loaded file\r\n   *\r\n   * @type {Uint8Array}\r\n   * @memberof HexEditor\r\n   */\r\n  @State() file: Uint8Array;\r\n\r\n  // keeps track of which line is displayed\r\n  @State() ln: number = 0;\r\n\r\n  get lineNumber() { return Math.floor(this.ln); }\r\n  set lineNumber(n: number) { this.ln = n; }\r\n\r\n  // stores position of mousedown event\r\n  tempSelection: {byte: number, bit: number};\r\n  // keeps track of selected portion of hex/ascii\r\n  @State() selection: {start: number, startBit: number, end: number, endBit: number};\r\n  // keeps track of where exactly the cursor is\r\n  @State() cursor: number;\r\n  // keeps track of the bit the cursor has selected (if in binary mode)\r\n  @State() bit: number;\r\n  // keeps track of what part of the editor was last clicked\r\n  @State() editingMode: EditingMode;\r\n\r\n  // the type of search to be executed\r\n  @State() searchType: SearchType = SearchType.ASCII;\r\n  // number of bytes the search should have (used when integer or float)\r\n  @State() searchByteCount: 1 | 2 | 4 | 8 = 1;\r\n  // endianness of the search\r\n  @State() searchEndian: Endianness = 'big';\r\n  // input to search for\r\n  @State() searchInput: string = '';\r\n  // results of the search\r\n  @State() searchResults: number[] = [];\r\n  // whether or not to display the search window\r\n  @State() searchActive: boolean = false;\r\n\r\n  // !SECTION\r\n\r\n  // SECTION PROPS\r\n\r\n  /**\r\n   * weather or not to display ASCII on the side\r\n   *\r\n   * @type {boolean}\r\n   * @memberof HexEditor\r\n   */\r\n  @Prop() displayAscii: boolean = true;\r\n\r\n  /**\r\n   * weather or not to display Hex\r\n   *\r\n   * @type {boolean}\r\n   * @memberof HexEditor\r\n   */\r\n  @Prop() displayHex: boolean = true;\r\n\r\n  /**\r\n   * weather or not to display binary\r\n   *\r\n   * @type {boolean}\r\n   * @memberof HexEditor\r\n   */\r\n  @Prop() displayBin: boolean = false;\r\n\r\n  /**\r\n   * the number of lines to display at once\r\n   *\r\n   * @type {number}\r\n   * @memberof HexEditor\r\n   */\r\n  @Prop() maxLines: number = 30;\r\n\r\n  /**\r\n   * the number of bytes to display per line\r\n   *\r\n   * @type {number}\r\n   * @memberof HexEditor\r\n   */\r\n  @Prop() bytesPerLine: number = 16;\r\n\r\n  \r\n  /**\r\n   * What character to put in place of invalid ASCII\r\n   * @memberof HexEditor\r\n   */\r\n  @Prop() nonDisplayCharacter: NonLetter = NonLetter.DOT;\r\n\r\n  /**\r\n   * How Opaque these invalid ASCII characters will be\r\n   * @memberof HexEditor\r\n   */\r\n  @Prop() nonDisplayOpacity: number = 0.45;\r\n\r\n  /**\r\n   * definitions for each chunk to display when\r\n   * displayAsChunks is enabled\r\n   *\r\n   * @type {number[]}\r\n   * @memberof HexEditor\r\n   */\r\n  @Prop() chunks: {\r\n    title?: string;\r\n    start: number;\r\n    end: number;\r\n  }[] = [];\r\n\r\n  /**\r\n   * displays the file as chunks (defined above)\r\n   *\r\n   * @type {boolean}\r\n   * @memberof HexEditor\r\n   */\r\n  @Prop() displayAsChunks: boolean = false;\r\n\r\n  /**\r\n   * weather or not to replace typical ASCII values\r\n   * with their ASCII value representation\r\n   * ( ex: 0x61 ==> \".a\" )\r\n   *\r\n   * @type {boolean}\r\n   * @memberof HexEditor\r\n   */\r\n  @Prop() asciiInline: boolean = false;\r\n\r\n  /**\r\n   * the number of chunks between separators\r\n   *\r\n   * @type {number}\r\n   * @memberof HexEditor\r\n   */\r\n  @Prop() bytesPerGroup: number = 4;\r\n\r\n  /**\r\n   * the number of bits between separators\r\n   * on the bit display\r\n   *\r\n   * @type {number}\r\n   * @memberof HexEditor\r\n   */\r\n  @Prop() bitsPerGroup: number = 8;\r\n\r\n  /**\r\n   * the mode of operation:\r\n   * region:\r\n   *    used to highlight different regions. Hovering over\r\n   *    a region displays a tooltip\r\n   * edit:\r\n   *    regions are displayed in the background, allowing\r\n   *    the user to edit directly\r\n   * noregion:\r\n   *    regions are not displayed at all\r\n   *\r\n   * @type {(\"region\" | \"edit\" | \"noregion\")}\r\n   * @memberof HexEditor\r\n   */\r\n  @Prop() mode: \"region\" | \"select\" | \"noregion\" = \"select\";\r\n\r\n  /**\r\n   * the mode of data entry:\r\n   * insert:\r\n   *    inserts data between bytes\r\n   * overwrite:\r\n   *    overwrites the currently selected byte\r\n   * readonly:\r\n   *    no edits are possible\r\n   *\r\n   * @type {(\"insert\" | \"overwrite\" | \"readonly\")}\r\n   * @memberof HexEditor\r\n   */\r\n  @Prop() editType: \"insert\" | \"overwrite\" | \"readonly\" = \"readonly\";\r\n\r\n  /**\r\n   * the number of regions to traverse\r\n   *\r\n   * @type {number}\r\n   * @memberof HexEditor\r\n   */\r\n  @Prop() regionDepth: number = 2;\r\n\r\n  /**\r\n   * the region data. Data will be displayed in the tooltip\r\n   * if mode is set to \"region\"\r\n   *\r\n   * @type {IRegion[]}\r\n   * @memberof HexEditor\r\n   */\r\n  @Prop() regions: IRegion[] = [];\r\n\r\n  // !SECTION\r\n\r\n  // SECTION EVENTS\r\n\r\n  /**\r\n   * Emitted when the lineNumber changes\r\n   *\r\n   * @type {EventEmitter}\r\n   * @memberof HexEditor\r\n   */\r\n  @Event() hexLineChanged: EventEmitter;\r\n\r\n  /**\r\n   * Emitted on the change of the cursor's position\r\n   *\r\n   * @type {EventEmitter}\r\n   * @memberof HexEditor\r\n   */\r\n  @Event() hexCursorChanged: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the selection changes\r\n   *\r\n   * @type {EventEmitter}\r\n   * @memberof HexEditor\r\n   */\r\n  @Event() hexSelectionChanged: EventEmitter;\r\n\r\n  /**\r\n   * fired when the file's data changes\r\n   *\r\n   * @type {EventEmitter}\r\n   * @memberof HexEditor\r\n   */\r\n  @Event() hexDataChanged: EventEmitter;\r\n\r\n  /**\r\n   * fired when the component loads\r\n   */\r\n  @Event() hexLoaded: EventEmitter;\r\n\r\n  // !SECTION\r\n\r\n  // SECTION COMPONENT LIFECYCLE METHODS\r\n\r\n  componentWillLoad() {\r\n    this.file = new Uint8Array(1024).map((_, i) => i % 256);\r\n\r\n    this.editController = new EditController(this);\r\n    this.regionScaleWidth = 28;\r\n    this.regionScaleHeight = 17;\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.hexLoaded.emit(this.editController);\r\n  }\r\n\r\n  // !SECTION\r\n\r\n  // SECTION LISTENERS\r\n  // !SECTION\r\n\r\n  // SECTION EXPOSED API\r\n\r\n  /**\r\n  * accepts and reads the given file, storing the result in\r\n  * the file variable\r\n  * @param file\r\n  */\r\n  @Method()\r\n  async acceptFile(file: File) {\r\n    console.log(file);\r\n    this.fileMetadata = file;\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n    reader.onload = (event) => {\r\n      this.file = new Uint8Array((event.target as any).result);\r\n      this.editController = new EditController(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * returns the edited file\r\n   *\r\n   * @returns {(Promise<Uint8Array | void>)}\r\n   * @memberof HexEditor\r\n   */\r\n  @Method()\r\n  async saveFile(): Promise<Uint8Array | void> {\r\n    if (this.file == undefined) return;\r\n    return this.editController.save();\r\n  }\r\n\r\n  /**\r\n   * sets the line number\r\n   *\r\n   * @param {number} newLineNumber\r\n   * @memberof HexEditor\r\n   */\r\n  @Method()\r\n  async setLineNumber(newLineNumber: number) {\r\n    if (newLineNumber < 0) this.lineNumber = 0;\r\n    else this.lineNumber = newLineNumber;\r\n    this.hexLineChanged.emit(this.lineNumber);\r\n  }\r\n\r\n  /**\r\n   * sets the new cursor position\r\n   *\r\n   * @param {number} newCursorPosition\r\n   * @memberof HexEditor\r\n   */\r\n  @Method()\r\n  async setCursorPosition(newCursorPosition: number, bit?: number) {\r\n    if (bit) {\r\n      let adjustMain = 0;\r\n      if (bit >= 8) adjustMain = Math.floor(bit / 8);\r\n      this.cursor = newCursorPosition + adjustMain;\r\n      this.bit = bit % 8;\r\n    } else {\r\n      this.cursor = newCursorPosition;\r\n    }\r\n\r\n    this.hexCursorChanged.emit({byte: this.cursor, bit: this.bit});\r\n  }\r\n\r\n  /**\r\n   * sets the new selection bounds.\r\n   * @param {{start?: number, end?: number}} newSelection\r\n   * @memberof HexEditor\r\n   */\r\n  @Method()\r\n  async setSelection(newSelection: {start?: number, end?: number, startBit?: number, endBit?: number}) {\r\n    this.selection = {...this.selection, ...newSelection};\r\n    this.hexSelectionChanged.emit(this.selection);\r\n  }\r\n\r\n  /**\r\n   * fetches a Uint8Array of a given length\r\n   * at the given location\r\n   * @param location where to fetch the data from\r\n   * @param length how many bytes to load\r\n   * @memberof HexEditor\r\n   */\r\n  @Method()\r\n  async getChunk(location: number, length: number) {\r\n    return this.editController.render(location, length);\r\n  }\r\n\r\n  /**\r\n   * returns the file's metadata\r\n   * @memberof HexEditor\r\n   */\r\n  @Method()\r\n  async getFileMetadata() {\r\n    return this.fileMetadata;\r\n  }\r\n\r\n  /**\r\n   * executes a search in the currently loaded file with the supplied parameters\r\n   *\r\n   * @param {string} text\r\n   * @param {SearchType} searchType\r\n   * @param {[number, number]} range\r\n   * @param {(1 | 2 | 4 | 8)} [searchByteCount]\r\n   * @param {('big' | 'little')} [searchEndian]\r\n   * @memberof HexEditor\r\n   */\r\n  @Method()\r\n  async executeSearch(\r\n    text: string,\r\n    searchType: SearchType,\r\n    range?: [number, number],\r\n    searchByteCount?: 1 | 2 | 4 | 8,\r\n    searchEndian?: 'big' | 'little',\r\n  ) {\r\n    let searchArr;\r\n    try {\r\n      searchArr = this.formatSearch(text, searchType, searchByteCount, searchEndian);\r\n    } catch(e) {\r\n      console.log(e);\r\n    }\r\n\r\n    this.searchResults = this.editController.find(searchArr, range ? range[0] : 0, range ? range[1] - range[0] : undefined);\r\n    return this.searchResults;\r\n  }\r\n\r\n  // !SECTION\r\n\r\n  // LOCAL METHODS\r\n\r\n  /**\r\n   * builds the elements responsible for the hex view\r\n   */\r\n  buildHexView() {\r\n    const { lineNumber, maxLines, bytesPerLine, bytesPerGroup, bitsPerGroup, asciiInline } = this;\r\n    const start = lineNumber * bytesPerLine;\r\n\r\n    const chunkData = this.editController.render(start, maxLines * bytesPerLine);\r\n    const chunk = chunkData.out;\r\n    const addedRanges = chunkData.meta.added;\r\n\r\n    const lines: Uint8Array[] = [];\r\n    for (let i = 0; i < maxLines; i++) {\r\n      lines.push(chunk.subarray(i * bytesPerLine, (i+1) * bytesPerLine));\r\n    }\r\n\r\n    const binViews = [];\r\n    const lineViews = [];\r\n    const charViews = [];\r\n    let selectedLine = -1;\r\n    for (const [lineNum, line] of lines.entries()) {\r\n      if (line.length === 0) break;\r\n\r\n      // setup variables\r\n      const base = start + lineNum * bytesPerLine;\r\n      const binLines = [];\r\n      const charLines = [];\r\n      const hexLines = [];\r\n      let ascii: string = this.nonDisplayCharacter;\r\n      document.documentElement.style.setProperty('--nd-opacity', `${this.nonDisplayOpacity}`);\r\n\r\n      // sets up everything else.\r\n      for (const [position, val] of [...line.values()].entries()) {\r\n        let out: string;\r\n        // classes\r\n        const classList = [];\r\n        if (/\\w|[!@#$%^&*()_+=\\]\\\\:;\"'>.<,/?]/.test(String.fromCharCode(val))) {\r\n          ascii = String.fromCharCode(val);\r\n        } else { \r\n          classList.push(\"nonDisplay\");\r\n          ascii = this.nonDisplayCharacter;\r\n        }\r\n\r\n        if (asciiInline && /\\w/.test(ascii)) { out = \".\" + ascii; }\r\n        else { out = val.toString(16).toUpperCase().padStart(2, '0'); }\r\n\r\n        \r\n        if (out.startsWith('.')) classList.push('ASCII');\r\n        if (position % bytesPerGroup === bytesPerGroup - 1) classList.push('padByte');\r\n        if (Math.floor(this.cursor) === base + position) {\r\n          classList.push('cursor');\r\n          selectedLine = lineNum;\r\n        }\r\n        if (this.selection && this.selection.start <= base + position && base + position <= this.selection.end) classList.push('selected');\r\n        for (const [start, end] of addedRanges) {\r\n          if (start <= base + position && base + position < end) {\r\n            classList.push('added');\r\n            break;\r\n          }\r\n        }\r\n\r\n        // binary spans are more complicated than the others\r\n        // they are split into 8 pieces (the 8 bits that make up a byte)\r\n        let binArr = val.toString(2).padStart(8, '0').split('');\r\n        let binSpans = [];\r\n        if (this.displayBin) {\r\n          for (let i = 0; i < binArr.length; i++) {\r\n            let binClass = '';\r\n            if ((position * 8 + i) % bitsPerGroup == bitsPerGroup - 1) binClass += 'padBit';\r\n            if (classList.includes('cursor') && (this.bit === i || this.bit === -1)) binClass += ' cursor';\r\n            if (classList.includes('selected')) {\r\n              if (this.selection.start === this.selection.end) {\r\n                if (i >= this.selection.startBit && i <= this.selection.endBit)\r\n                  binClass += ' selected';\r\n              }\r\n              else if (this.selection.start === base + position) {\r\n                if (i >= this.selection.startBit) binClass += ' selected';\r\n              }\r\n              else if (this.selection.end === base + position) {\r\n                if (i <= this.selection.endBit || this.selection.endBit === -1) binClass += ' selected';\r\n              }\r\n              else binClass += ' selected';\r\n            }\r\n            binSpans.push(<span data-cursor-idx={i} class={binClass}>{binArr[i]}</span>);\r\n          }\r\n        }\r\n\r\n        if (this.displayBin) binLines.push(<span data-cursor-idx={base + position} class={\"binGroup\" + (classList.includes('added') ? ' added' : '')}>{binSpans}</span>)\r\n        if (this.displayAscii) charLines.push(<span data-cursor-idx={base + position} class={classList.join(' ')}>{ascii}</span>);\r\n        if (this.displayHex) hexLines.push(<span data-cursor-idx={base + position} class={classList.join(' ')}>{out}</span>);\r\n      }\r\n\r\n      if (this.displayBin) binViews.push((\r\n        <div class={'binLine' + (selectedLine === lineNum ? ' selected' : '')}>{binLines}</div>\r\n      ))\r\n\r\n      if (this.displayHex) {\r\n        lineViews.push((\r\n          <div class={'hexLine' + (selectedLine === lineNum ? ' selected' : '')}>{hexLines}</div>\r\n        ));\r\n      } else {\r\n        lineViews.push({});\r\n      }\r\n\r\n      if (this.displayAscii) charViews.push((\r\n        <div class={'charLine' + (selectedLine === lineNum ? ' selected' : '')}>{charLines}</div>\r\n      ))\r\n\r\n    }\r\n\r\n    // fill extra space\r\n    while (lineViews.length < maxLines) {\r\n      binViews.push(<div class=\"binLine\" style={{pointerEvents: 'none'}}><span>-</span></div>);\r\n      lineViews.push(<div class=\"hexLine\" style={{pointerEvents: 'none'}}><span>-</span></div>);\r\n      charViews.push(<div class=\"charLine\" style={{pointerEvents: 'none'}}><span>-</span></div>);\r\n    }\r\n\r\n    // line number builder\r\n    const lineLabels = [];\r\n    for (let i = 0; i < maxLines; i++) {\r\n      lineLabels.push(<div class={'lineLabel' + (selectedLine === i ? ' selected' : '')} style={{pointerEvents: 'none'}}>{'0x' + (start + i * bytesPerLine).toString(16).padStart(8, ' ')}</div>)\r\n    }\r\n\r\n    // regions\r\n\r\n    const binRegionMarkers = [];\r\n    const hexRegionMarkers = [];\r\n    const asciiRegionMarkers = [];\r\n\r\n    const buildRegion = (region: IRegion, depth = 0, index?: number) => {\r\n      if (region.end < start || region.start > start + this.maxLines * this.bytesPerLine) {\r\n        if (region.subRegions && depth + 1 !== this.regionDepth) {\r\n          for (const [i, r] of region.subRegions.entries()) buildRegion(r, depth + 1, i);\r\n        }\r\n        return;\r\n      };\r\n\r\n      if (depth === this.regionDepth) return;\r\n\r\n      // start / end offsets\r\n      const s = region.start % this.bytesPerLine;\r\n      const e = region.end % this.bytesPerLine;\r\n\r\n      // l is the \"height\" of the region. It was a bit confusing, so allow me to explain:\r\n      // instead of only taking into account the start and end of the region's offsets,\r\n      // what we ACTUALLY want is the start and end while taking into account the offset\r\n      // provided by 's'\r\n      const l = Math.floor((region.end - region.start + s) / this.bytesPerLine);\r\n\r\n      const offset = Math.floor(region.start / this.bytesPerLine) - lineNumber;\r\n\r\n      const getColor = {\r\n        0: ['#88F', '#BBF'],\r\n        1: ['#F88', '#FBB'],\r\n        2: ['#8D8', '#BDB']\r\n      }\r\n\r\n      const genPolygon = (width: number, height: number) => (\r\n          <polygon\r\n            onMouseMove={\r\n              (evt: MouseEvent) => {\r\n                if (document.getElementById('tooltip').getAttribute('active') === \"frozen\") return;\r\n                if (this.canUpdateMouseMove === undefined) {\r\n                  this.canUpdateMouseMove = true;\r\n                }\r\n                if (this.canUpdateMouseMove) {\r\n                  this.canUpdateMouseMove = false;\r\n                  document.documentElement.style.setProperty('--mouse-x', `${evt.clientX}`);\r\n                  document.documentElement.style.setProperty('--mouse-y', `${evt.clientY}`);\r\n                  document.getElementById('tooltip').setAttribute('active', 'true')\r\n                  document.getElementById('tooltip').setAttribute('complex', `${JSON.stringify({...region, subRegions: region.subRegions ? region.subRegions.map(sr => sr.name) : null})}`);\r\n\r\n                  setTimeout(() => {this.canUpdateMouseMove = true}, 50);\r\n                }\r\n              }\r\n            }\r\n            onMouseLeave={\r\n              () => { \r\n                if (document.getElementById('tooltip').getAttribute('active') === \"true\")\r\n                  document.getElementById('tooltip').setAttribute('active', 'false')\r\n              }\r\n            }\r\n            onClick={\r\n              (evt: MouseEvent) => {\r\n                if (document.getElementById('tooltip').getAttribute('active') === \"frozen\") {\r\n                  if (document.getSelection().anchorNode?.parentElement?.parentElement?.tagName === \"HEX-TOOLTIP\") {\r\n                    document.getSelection().empty();\r\n                  }\r\n                  document.documentElement.style.setProperty('--mouse-x', `${evt.clientX}`);\r\n                  document.documentElement.style.setProperty('--mouse-y', `${evt.clientY}`);\r\n                  document.getElementById('tooltip').setAttribute('active', 'true')\r\n                  document.getElementById('tooltip').setAttribute('complex', `${JSON.stringify({...region, subRegions: region.subRegions ? region.subRegions.map(sr => sr.name) : null})}`);\r\n                } else {\r\n                  document.getElementById('tooltip').setAttribute('active', 'frozen');\r\n                  document.documentElement.style.setProperty('--mouse-x', `${evt.clientX - 10}`);\r\n                  document.documentElement.style.setProperty('--mouse-y', `${evt.clientY - 10}`);\r\n                };\r\n              }\r\n            }\r\n            class=\"region\"\r\n            points={`\r\n              0,${(1 + offset) * height}\r\n              ${s * width},${(1 + offset) * height}\r\n              ${s * width},${offset * height}\r\n              ${this.bytesPerLine * width},${offset * height}\r\n              ${this.bytesPerLine * width},${(l + offset) * height}\r\n              ${e * width},${(l + offset) * height}\r\n              ${e * width},${(l + offset + 1) * height}\r\n              0,${(l+1 + offset) * height}\r\n            `} fill={region.color || getColor[depth % 3][index % 2]} stroke=\"none\"\r\n          />\r\n        )\r\n\r\n      binRegionMarkers.push(genPolygon(14 * 8, this.regionScaleHeight));\r\n      hexRegionMarkers.push(genPolygon(this.regionScaleWidth, this.regionScaleHeight));\r\n      asciiRegionMarkers.push(genPolygon(10, this.regionScaleHeight));\r\n      // if regions don't work right in the future then the if condition below is the reason why\r\n      if (region.subRegions && depth + 1 !== this.regionDepth) {\r\n        for (const [i, r] of region.subRegions.entries()) buildRegion(r, depth + 1, i);\r\n      }\r\n      // }\r\n    }\r\n\r\n    for (const [i, region] of this.regions.entries()) {\r\n      buildRegion(region, 0, i);\r\n    }\r\n    // style={{width: this.bytesPerLine * this.regionScaleWidth, height: this.maxLines * this.regionScaleHeight}}\r\n\r\n    const binRegions = <svg viewBox={`0 0 ${this.bytesPerLine * 14 * 8} ${this.maxLines * this.regionScaleHeight}`} width={`${this.bytesPerLine * 14 * 8}`} height={`${this.maxLines * this.regionScaleHeight}`}>{binRegionMarkers}</svg>\r\n    const hexRegions = <svg viewBox={`0 0 ${this.bytesPerLine * this.regionScaleWidth} ${this.maxLines * this.regionScaleHeight}`} width={`${this.bytesPerLine * this.regionScaleWidth}`} height={`${this.maxLines * this.regionScaleHeight}`}>{hexRegionMarkers}</svg>\r\n    const asciiRegions = <svg viewBox={`0 0 ${this.bytesPerLine * 10} ${this.maxLines * this.regionScaleHeight}`} width={`${this.bytesPerLine * 10}`} height={`${this.maxLines * this.regionScaleHeight}`}>{asciiRegionMarkers}</svg>\r\n    return {\r\n      lineViews,\r\n      charViews,\r\n      binViews,\r\n      lineLabels,\r\n      binRegions,\r\n      hexRegions,\r\n      asciiRegions\r\n    }\r\n  }\r\n\r\n  buildChunks() {\r\n    const { lineNumber, maxLines, bytesPerLine, bytesPerGroup, chunks, bitsPerGroup, asciiInline } = this;\r\n    // console.log(lineNumber);\r\n    const chunkOffset = {\r\n      chunk: 0,\r\n      chunkLineOffs: 0\r\n    };\r\n    // get offset data for the generated chunks\r\n    for (let lNum = lineNumber, j = 0; lNum > 0 && j < chunks.length; lNum--, j++) {\r\n      const acc = Math.floor((chunks[j].end - chunks[j].start) / bytesPerLine) + 1;\r\n      lNum -= acc;\r\n      if (lNum > 0) chunkOffset.chunk += 1;\r\n      else chunkOffset.chunkLineOffs = acc - lNum * -1;\r\n    }\r\n\r\n    // render the chunks, rendering\r\n    // only the parts that are visible\r\n    const renderedChunks: {\r\n      data: Uint8Array,\r\n      start: number,\r\n      startLine: number,\r\n      endLine: number,\r\n    }[] = [];\r\n    for (let i = chunkOffset.chunk, lineCount = 0; lineCount < maxLines && i < chunks.length; i++) {\r\n      const startLine = lineCount;\r\n      const chunk = chunks[i];\r\n      let actualStart = chunk.start;\r\n      if (i == chunkOffset.chunk) actualStart += bytesPerLine * chunkOffset.chunkLineOffs;\r\n      if (chunk.end - actualStart <= 0) {\r\n        // renderedChunks.push({data: new Uint8Array(0), start: -1, startLine: -1, endLine: -1});\r\n        continue;\r\n      }\r\n      lineCount += Math.ceil((chunk.end - actualStart) / bytesPerLine);\r\n\r\n      let actualEnd = chunk.end;\r\n      if (lineCount > maxLines) actualEnd -= (lineCount - maxLines) * bytesPerLine;\r\n      // console.log(actualEnd - actualStart);\r\n      const rendered = this.editController.render(actualStart, actualEnd - actualStart).out;\r\n\r\n      renderedChunks.push({start: actualStart, data: rendered, startLine, endLine: lineCount});\r\n      for (let j = 0; j < 1; j++) {\r\n        lineCount += 1;\r\n        renderedChunks.push({data: new Uint8Array(0), start: -1, startLine: -1, endLine: -1});\r\n      }\r\n\r\n\r\n    }\r\n    renderedChunks.pop();\r\n\r\n    let lineViews = [];\r\n    let charViews = [];\r\n    let binViews = [];\r\n    let lineLabels = [];\r\n\r\n    const binRegionMarkers = [];\r\n    const hexRegionMarkers = [];\r\n    const asciiRegionMarkers = [];\r\n\r\n    for (const {start, data, startLine} of renderedChunks) {\r\n      if (start === -1) {\r\n        lineLabels.push(<div class='separator' style={{pointerEvents: 'none'}}>NA</div>)\r\n        lineViews.push(<div class='separator' style={{pointerEvents: 'none'}}>NA</div>)\r\n        charViews.push(<div class='separator' style={{pointerEvents: 'none'}}>NA</div>)\r\n        binViews.push(<div class='separator' style={{pointerEvents: 'none'}}>NA</div>)\r\n        continue;\r\n      }\r\n      for (let i = 0; i < data.length; i += bytesPerLine) {\r\n        const lineStart = start + i;\r\n        const hexLine = [];\r\n        const charLine = [];\r\n        const binLine = [];\r\n        let selectedLine = -1;\r\n        for (let j = i; j < i + bytesPerLine && j < data.length; j++) {\r\n          const val = data[j];\r\n          const position = start + j;\r\n\r\n          let out: string;\r\n          let ascii: string;\r\n          if (/\\w|[!@#$%^&*()_+=\\]\\\\:;\"'>.<,/?]/.test(String.fromCharCode(val))) {\r\n            ascii = String.fromCharCode(val);\r\n          } else { ascii = this.nonDisplayCharacter; }\r\n\r\n          if (asciiInline && /\\w/.test(ascii)) { out = \".\" + ascii; }\r\n          else { out = val.toString(16).toUpperCase().padStart(2, '0'); }\r\n\r\n          // classes\r\n          const classList = [];\r\n          if (out.startsWith('.')) classList.push('ASCII');\r\n          if ((j - i) % bytesPerGroup === bytesPerGroup - 1) classList.push('padByte');\r\n          if (Math.floor(this.cursor) === position) {\r\n            classList.push('cursor');\r\n            selectedLine = lineStart;\r\n          }\r\n          if (this.selection && this.selection.start <= position && position <= this.selection.end) classList.push('selected');\r\n\r\n          // binary spans are more complicated than the others\r\n          // they are split into 8 pieces (the 8 bits that make up a byte)\r\n          let binArr = val.toString(2).padStart(8, '0').split('');\r\n          let binSpans = [];\r\n          if (this.displayBin) {\r\n            for (let k = 0; k < binArr.length; k++) {\r\n              let binClass = '';\r\n              if ((position * 8 + k) % bitsPerGroup == bitsPerGroup - 1) binClass += 'padBit';\r\n              if (classList.includes('cursor') && (this.bit === k || this.bit === -1)) binClass += ' cursor';\r\n              if (classList.includes('selected')) {\r\n                if (this.selection.start === this.selection.end) {\r\n                  if (k >= this.selection.startBit && k <= this.selection.endBit)\r\n                    binClass += ' selected';\r\n                }\r\n                else if (this.selection.start == position) {\r\n                  if (k >= this.selection.startBit) binClass += ' selected';\r\n                }\r\n                else if (this.selection.end == position) {\r\n                  if (k <= this.selection.endBit || this.selection.endBit === -1) binClass += ' selected';\r\n                }\r\n                else binClass += ' selected';\r\n              }\r\n              binSpans.push(<span data-cursor-idx={k} class={binClass}>{binArr[k]}</span>);\r\n            }\r\n          }\r\n\r\n          if (this.displayBin) binLine.push(<span data-cursor-idx={position} class={\"binGroup\" + (classList.includes('added') ? ' added' : '')}>{binSpans}</span>)\r\n          if (this.displayAscii) charLine.push(<span data-cursor-idx={position} class={classList.join(' ')}>{ascii}</span>);\r\n          if (this.displayHex) hexLine.push(<span data-cursor-idx={position} class={classList.join(' ')}>{out}</span>);\r\n        }\r\n\r\n        lineLabels.push((\r\n          <div class={'lineLabel' + (selectedLine === lineStart ? ' selected' : '')} style={{pointerEvents: 'none'}}>{'0x' + (lineStart).toString(16).padStart(8, ' ')}</div>\r\n        ))\r\n\r\n        if (this.displayBin) binViews.push((\r\n          <div class={'binLine' + (selectedLine === lineStart ? ' selected' : '')}>{binLine}</div>\r\n        ))\r\n\r\n        if (this.displayHex) {\r\n          lineViews.push((\r\n            <div class={'hexLine' + (selectedLine === lineStart ? ' selected' : '')}>{hexLine}</div>\r\n          ));\r\n        } else {\r\n          lineViews.push({});\r\n        }\r\n\r\n        if (this.displayAscii) charViews.push((\r\n          <div class={'charLine' + (selectedLine === lineStart ? ' selected' : '')}>{charLine}</div>\r\n        ))\r\n\r\n      }\r\n\r\n      const buildRegion = (region: IRegion, depth = 0, index?: number) => {\r\n        const lineCount = Math.floor(data.length / bytesPerLine);\r\n        const horizOffset = start % bytesPerLine;\r\n\r\n        if (region.end < start || region.start > start + lineCount * bytesPerLine) {\r\n          if (region.subRegions && depth + 1 !== this.regionDepth) {\r\n            for (const [i, r] of region.subRegions.entries()) buildRegion(r, depth + 1, i);\r\n          }\r\n          return;\r\n        };\r\n\r\n        if (depth === this.regionDepth) return;\r\n\r\n        const startByte = Math.max(region.start, start);\r\n        const endByte = Math.min(region.end, start + data.length);\r\n\r\n        const s = (startByte - horizOffset) % bytesPerLine;\r\n        const e = (endByte - horizOffset) % bytesPerLine;\r\n\r\n        const l = Math.floor((endByte - startByte + s) / bytesPerLine);\r\n\r\n        const vertOffset = (Math.floor((startByte - start) / bytesPerLine) + startLine);\r\n        // console.log(startLine)\r\n        // console.log(idx, startByte.toString(16), vertOffset);\r\n\r\n        const getColor = {\r\n          0: ['#88F', '#BBF'],\r\n          1: ['#F88', '#FBB'],\r\n          2: ['#8D8', '#BDB']\r\n        };\r\n\r\n        const genPolygon = (width: number, height: number) => (\r\n          <polygon\r\n            onMouseMove={\r\n              (evt: MouseEvent) => {\r\n                if (this.canUpdateMouseMove === undefined) {\r\n                  this.canUpdateMouseMove = true;\r\n                }\r\n                if (this.canUpdateMouseMove) {\r\n                  this.canUpdateMouseMove = false;\r\n                  document.documentElement.style.setProperty('--mouse-x', `${evt.clientX}`);\r\n                  document.documentElement.style.setProperty('--mouse-y', `${evt.clientY}`);\r\n                  document.getElementById('tooltip').setAttribute('active', 'true')\r\n                  document.getElementById('tooltip').setAttribute('complex', `${JSON.stringify({...region, subRegions: region.subRegions ? region.subRegions.map(sr => sr.name) : null})}`);\r\n\r\n                  setTimeout(() => {this.canUpdateMouseMove = true}, 50);\r\n                }\r\n              }\r\n            }\r\n            onMouseLeave={() => document.getElementById('tooltip').setAttribute('active', 'false')}\r\n            class=\"region\"\r\n            points={`\r\n              0,${(1 + vertOffset) * height}\r\n              ${s * width},${(1 + vertOffset) * height}\r\n              ${s * width},${vertOffset * height}\r\n              ${this.bytesPerLine * width},${vertOffset * height}\r\n              ${this.bytesPerLine * width},${(l + vertOffset) * height}\r\n              ${e * width},${(l + vertOffset) * height}\r\n              ${e * width},${(l + vertOffset + 1) * height}\r\n              0,${(l+1 + vertOffset) * height}\r\n            `} fill={region.color || getColor[depth % 3][index % 2]} stroke=\"none\"\r\n          />\r\n        )\r\n\r\n        binRegionMarkers.push(genPolygon(14 * 8, this.regionScaleHeight));\r\n        hexRegionMarkers.push(genPolygon(this.regionScaleWidth, this.regionScaleHeight));\r\n        asciiRegionMarkers.push(genPolygon(10, this.regionScaleHeight));\r\n        // if regions don't work right in the future then the if condition below is the reason why\r\n        if (region.subRegions && depth + 1 !== this.regionDepth) {\r\n          for (const [i, r] of region.subRegions.entries()) buildRegion(r, depth + 1, i);\r\n        }\r\n\r\n      }\r\n\r\n      for (const [i, region] of this.regions.entries()) {\r\n        buildRegion(region, 0, i);\r\n      }\r\n    }\r\n\r\n    while (lineViews.length < maxLines) {\r\n      lineLabels.push(<div class=\"separator\" ><span>-</span></div>)\r\n      binViews.push(<div class=\"separator\" ><span>-</span></div>);\r\n      lineViews.push(<div class=\"separator\" ><span>-</span></div>);\r\n      charViews.push(<div class=\"separator\" ><span>-</span></div>);\r\n    }\r\n\r\n    const binRegions = <svg viewBox={`0 0 ${this.bytesPerLine * 14 * 8} ${this.maxLines * this.regionScaleHeight}`} width={`${this.bytesPerLine * 14 * 8}`} height={`${this.maxLines * this.regionScaleHeight}`}>{binRegionMarkers}</svg>\r\n    const hexRegions = <svg viewBox={`0 0 ${this.bytesPerLine * this.regionScaleWidth} ${this.maxLines * this.regionScaleHeight}`} width={`${this.bytesPerLine * this.regionScaleWidth}`} height={`${this.maxLines * this.regionScaleHeight}`}>{hexRegionMarkers}</svg>\r\n    const asciiRegions = <svg viewBox={`0 0 ${this.bytesPerLine * 10} ${this.maxLines * this.regionScaleHeight}`} width={`${this.bytesPerLine * 10}`} height={`${this.maxLines * this.regionScaleHeight}`}>{asciiRegionMarkers}</svg>\r\n\r\n    return {\r\n      lineViews,\r\n      charViews,\r\n      binViews,\r\n      lineLabels,\r\n      binRegions,\r\n      hexRegions,\r\n      asciiRegions\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * edits the underlying uint8array or\r\n   * adjusts the cursor position\r\n   *\r\n   * @param {KeyboardEvent} evt\r\n   * @returns\r\n   * @memberof HexEditor\r\n   */\r\n  edit(evt: KeyboardEvent) {\r\n    if ((evt.target as HTMLElement).className !== 'hex') return;\r\n    const evtArrowKeyConditions = {\r\n      ArrowDown: () => {\r\n        this.setCursorPosition(\r\n          (this.cursor + this.bytesPerLine > this.editController.length)\r\n          ? this.editController.length\r\n          : this.cursor + this.bytesPerLine)\r\n      },\r\n      ArrowUp: () => { this.setCursorPosition((this.cursor - this.bytesPerLine < 0) ? 0 : this.cursor - this.bytesPerLine) },\r\n      ArrowRight: () => {\r\n        this.setCursorPosition(\r\n          (this.cursor + 1 > this.editController.length)\r\n          ? this.editController.length\r\n          : this.cursor + 1)\r\n      },\r\n      ArrowLeft: () => { this.setCursorPosition((this.cursor - 1 < 0) ? 0 : this.cursor - 1) }\r\n    }\r\n    if (evtArrowKeyConditions[evt.key]) {\r\n      evt.preventDefault();\r\n      // commits/ends any edits\r\n      if (this.editController.inProgress) this.editController.commit();\r\n      // executes key function\r\n      evtArrowKeyConditions[evt.key]();\r\n      // adjusts scroll / selection based on new cursor position\r\n      if (this.cursor > (this.lineNumber + this.maxLines) * this.bytesPerLine - 1)\r\n        this.setLineNumber(Math.floor(this.cursor / this.bytesPerLine) - this.maxLines + 1)\r\n      else if (this.cursor < this.lineNumber * this.bytesPerLine)\r\n        this.setLineNumber(Math.floor(this.cursor / this.bytesPerLine))\r\n      // adjusts selection if shift key is held\r\n      if (evt.shiftKey) {\r\n        if (this.selection.start > this.cursor) this.setSelection({start: this.cursor});\r\n        else this.setSelection({end: this.cursor});\r\n      } else {\r\n        this.setSelection({start: this.cursor, end: this.cursor})\r\n      }\r\n    } else if ((evt.ctrlKey || evt.metaKey) && evt.key === 'f') {\r\n      // toggles find window\r\n      evt.preventDefault();\r\n      this.searchActive = !this.searchActive;\r\n      forceUpdate(this);\r\n    } else {\r\n      if (this.editType === 'readonly') return;\r\n      evt.preventDefault();\r\n      this.editController.buildEdit(evt);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * turns the search input from the type into an array of numbers\r\n   * that represent its binary equivalent in the format specified\r\n   *\r\n   * @param {string} text\r\n   * @param {SearchType} searchType\r\n   * @param {(1 | 2 | 4 | 8)} [searchByteCount]\r\n   * @param {('big' | 'little')} [searchEndian]\r\n   * @returns {number[]}\r\n   * @memberof HexEditor\r\n   */\r\n  formatSearch(\r\n    text: string,\r\n    searchType: SearchType,\r\n    searchByteCount?: 1 | 2 | 4 | 8,\r\n    searchEndian?: 'big' | 'little'\r\n  ): number[] {\r\n    if (text.length === 0) throw new Error('LEN0: there needs to be something to search for...');\r\n    switch(searchType) {\r\n      case SearchType.INTEGER:\r\n        const max = parseInt('0x' + new Array(searchByteCount + 1).join('FF'), 16);\r\n        let v = parseInt(text);\r\n        if (Math.abs(v) > max) {\r\n          v = max * Math.sign(v);\r\n        }\r\n        const out = v.toString(16).padStart(2 * searchByteCount, '0').match(/.{2}/g).map(v => parseInt(v, 16));\r\n        if (searchEndian === 'little') out.reverse();\r\n        return out;\r\n      case SearchType.FLOAT:\r\n        return floatToBin(parseFloat(text), searchByteCount, searchEndian)\r\n      case SearchType.BYTE:\r\n        if (/[^0-9a-f ,|;]/ig.test(text)) throw new Error('UC: Unexpected Character (must be exclusively 0-9 and a-f)')\r\n        else {\r\n          return text.replace(/[ ,|;]/ig, '').match(/.{2}/g).map(v => parseInt(v, 16));\r\n        }\r\n      case SearchType.ASCII:\r\n      default:\r\n        return text.split('').map(ch => ch.charCodeAt(0));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * triggers a find operation on the currently selected chunk\r\n   * if there is one, otherwise it searches the full thing\r\n   *\r\n   * @memberof HexEditor\r\n   */\r\n  async findInSelection() {\r\n    const range = this.selection ? this.selection.end - this.selection.start : 0;\r\n    this.searchResults =\r\n      await this.executeSearch(\r\n        this.searchInput,\r\n        this.searchType,\r\n        range === 0\r\n          ? undefined\r\n          : [ this.selection.start, this.selection.end ],\r\n        this.searchByteCount,\r\n        this.searchEndian);\r\n  }\r\n\r\n  /**\r\n   * displays the full hexidecimal view\r\n   */\r\n  showHex() {\r\n    const { lineViews, binViews, charViews, lineLabels, binRegions, hexRegions, asciiRegions } = this.buildHexView();\r\n\r\n    let searchHexDisplay;\r\n    try {\r\n      searchHexDisplay =\r\n        this.formatSearch(this.searchInput, this.searchType, this.searchByteCount, this.searchEndian)\r\n          .map(v => v.toString(16).padStart(2, '0')).join(', ');\r\n    } catch (e) {\r\n      if (e.message.startsWith('LEN0')) searchHexDisplay = '';\r\n      else searchHexDisplay = e.message;\r\n    }\r\n\r\n    let searchResults;\r\n    if (this.searchActive) {\r\n      const jumpToResult = (val: string) => {\r\n        let v = parseInt(val);\r\n        this.setCursorPosition(v);\r\n        this.setSelection({\r\n          start: v,\r\n          end: v + (([SearchType.INTEGER, SearchType.FLOAT].includes(this.searchType)) ? this.searchByteCount : this.searchInput.length) - 1,\r\n          startBit: -1,\r\n          endBit: -1\r\n        })\r\n        this.setLineNumber(Math.floor(v / this.bytesPerLine) - this.maxLines / 2)\r\n      }\r\n      searchResults = (\r\n        <select onChange={(evt) => jumpToResult((evt.target as HTMLSelectElement).value)}>\r\n          {this.searchResults.map(v =>\r\n            <option value={v}>{`0x${v.toString(16)}`}</option>\r\n          )}\r\n        </select>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div class=\"hex\"\r\n        onMouseEnter={(evt) => this._toggleScrollListener(evt)}\r\n        onMouseLeave={(evt) => this._toggleScrollListener(evt)}\r\n        onMouseDown={(evt) => this.beginSelection(evt)}\r\n        onMouseUp={(evt) => this.endSelection(evt)}\r\n        \r\n        tabindex=\"0\"\r\n        onKeyDown={(evt) => this.edit(evt)}\r\n      >\r\n        <div id=\"MEASURE\" class=\"hex\" style={{position: 'absolute', visibility: 'hidden', padding: '0 5px'}}>AB</div>\r\n        <div class=\"lineLabels\">\r\n          {lineLabels}\r\n        </div>\r\n        {this.displayBin ?\r\n          <div class=\"binView\">\r\n            <div class=\"highlight\" style={{position: 'absolute', top: '0', display: this.mode === 'noregion' ? 'none' : 'block', zIndex: this.mode === 'region' ? '3' : '0'}}>\r\n              {binRegions}\r\n            </div>\r\n            <div class=\"main\">\r\n              {binViews}\r\n            </div>\r\n          </div>\r\n        : null}\r\n        {this.displayHex ?\r\n          <div class=\"hexView\">\r\n            <div class=\"highlight\" style={{position: 'absolute', top: '0', display: this.mode === 'noregion' ? 'none' : 'block', zIndex: this.mode === 'region' ? '3' : '0'}}>\r\n              {hexRegions}\r\n            </div>\r\n            <div class=\"main\">\r\n              {lineViews}\r\n            </div>\r\n          </div>\r\n        : null}\r\n        {this.displayAscii ?\r\n          <div class=\"asciiView\">\r\n            <div class=\"highlight\" style={{position: 'absolute', top: '0', display: this.mode === 'noregion' ? 'none' : 'block', zIndex: this.mode === 'region' ? '3' : '0'}}>\r\n              {asciiRegions}\r\n            </div>\r\n            <div class=\"main\">\r\n              {charViews}\r\n            </div>\r\n          </div>\r\n          : null}\r\n        {this.searchActive ?\r\n          <div class=\"find\">\r\n            search: \r\n            <input type=\"text\" onChange={(evt) => this.searchInput = (evt.target as HTMLInputElement).value} />\r\n            <select onChange={(evt) => this.searchType = (evt.target as HTMLSelectElement).value as any}>\r\n              <option value={SearchType.ASCII}>ASCII string</option>\r\n              <option value={SearchType.BYTE}>bytes</option>\r\n              <option value={SearchType.INTEGER}>integer</option>\r\n              <option value={SearchType.FLOAT}>float</option>\r\n            </select>\r\n            {([SearchType.INTEGER, SearchType.FLOAT].includes(this.searchType)) ? [\r\n              <select onChange={(evt) => this.searchByteCount = parseInt((evt.target as HTMLSelectElement).value) as any}>\r\n                <option value=\"1\">1 byte</option>\r\n                <option value=\"2\">2 bytes</option>\r\n                <option value=\"4\">4 bytes</option>\r\n                <option value=\"8\">8 bytes</option>\r\n              </select>,\r\n              <select onChange={(evt) => this.searchEndian = (evt.target as HTMLSelectElement).value as any}>\r\n                <option value=\"big\">big endian</option>\r\n                <option value=\"little\">little endian</option>\r\n              </select>\r\n            ]\r\n            : null}\r\n            <button onClick={() => this.findInSelection()}>search</button>\r\n            <br/>\r\n            hex: {searchHexDisplay} | results: {searchResults}\r\n          </div>\r\n        : null}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * displays the chunks\r\n   *\r\n   * @memberof HexEditor\r\n   */\r\n  showChunks() {\r\n    const {\r\n      lineViews,\r\n      binViews,\r\n      charViews,\r\n      lineLabels,\r\n      binRegions,\r\n      hexRegions,\r\n      asciiRegions\r\n    } = this.buildChunks();\r\n\r\n\r\n    return (\r\n      <div class=\"hex\"\r\n        onMouseEnter={(evt) => this._toggleScrollListener(evt)}\r\n        onMouseLeave={(evt) => this._toggleScrollListener(evt)}\r\n        onMouseDown={(evt) => this.beginSelection(evt)}\r\n        onMouseUp={(evt) => this.endSelection(evt)}\r\n\r\n        tabindex=\"0\"\r\n        onKeyDown={(evt) => this.edit(evt)}\r\n      >\r\n        <div id=\"MEASURE\" class=\"hex\" style={{position: 'absolute', visibility: 'hidden', padding: '0 5px'}}>AB</div>\r\n        <div class=\"lineLabels\">\r\n          {lineLabels}\r\n        </div>\r\n        {this.displayBin ?\r\n          <div class=\"binView\">\r\n            <div class=\"highlight\" style={{position: 'absolute', top: '0', display: this.mode === 'noregion' ? 'none' : 'block', zIndex: this.mode === 'region' ? '3' : '0'}}>\r\n              {binRegions}\r\n            </div>\r\n            <div class=\"main\">\r\n              {binViews}\r\n            </div>\r\n          </div>\r\n        : null}\r\n        {this.displayHex ?\r\n          <div class=\"hexView\">\r\n            <div class=\"highlight\" style={{position: 'absolute', top: '0', display: this.mode === 'noregion' ? 'none' : 'block', zIndex: this.mode === 'region' ? '3' : '0'}}>\r\n              {hexRegions}\r\n            </div>\r\n            <div class=\"main\">\r\n              {lineViews}\r\n            </div>\r\n          </div>\r\n        : null}\r\n        {this.displayAscii ?\r\n          <div class=\"asciiView\">\r\n            <div class=\"highlight\" style={{position: 'absolute', top: '0', display: this.mode === 'noregion' ? 'none' : 'block', zIndex: this.mode === 'region' ? '3' : '0'}}>\r\n              {asciiRegions}\r\n            </div>\r\n            <div class=\"main\">\r\n              {charViews}\r\n            </div>\r\n          </div>\r\n          : null}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * gets the exact position of\r\n   * @param evt the mousedown event\r\n   */\r\n  beginSelection(evt: any) {\r\n    if ((evt.target as HTMLElement).id === 'HEX-SCROLLBAR') return;\r\n    if ((evt.target as HTMLElement).parentElement.tagName == \"svg\") return;\r\n    const parentClassName = (evt.target as HTMLElement).parentElement.className;\r\n    if (!parentClassName) return;\r\n    if (parentClassName.includes('charLine')) this.editingMode = EditingMode.ASCII;\r\n    else if (parentClassName.includes('hexLine')) this.editingMode = EditingMode.BYTE;\r\n    else if (parentClassName.includes('binGroup')) this.editingMode = EditingMode.BIT;\r\n    else return;\r\n\r\n    if (this.editingMode === EditingMode.BIT) {\r\n      this.tempSelection = {\r\n        byte: parseInt(evt.composedPath()[1].getAttribute('data-cursor-idx')),\r\n        bit: parseInt(evt.target.getAttribute('data-cursor-idx'))\r\n      }\r\n    }\r\n    else {\r\n      this.tempSelection = {\r\n        byte: parseInt(evt.target.getAttribute('data-cursor-idx')),\r\n        bit: -1\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  endSelection(evt: any) {\r\n    if (this.tempSelection === null) return;\r\n\r\n    if ((evt.target as HTMLElement).parentElement.tagName == \"svg\") return;\r\n    const parentClassName = (evt.target as HTMLElement).parentElement.className;\r\n    if (parentClassName.includes('charLine')) this.editingMode = EditingMode.ASCII;\r\n    else if (parentClassName.includes('hexLine')) this.editingMode = EditingMode.BYTE;\r\n    else if (parentClassName.includes('binGroup')) this.editingMode = EditingMode.BIT;\r\n    else return;\r\n\r\n    let chosen;\r\n    if (this.editingMode === EditingMode.BIT) {\r\n      chosen = {\r\n        byte: parseInt(evt.composedPath()[1].getAttribute('data-cursor-idx')),\r\n        bit: parseInt(evt.target.getAttribute('data-cursor-idx'))\r\n      }\r\n    }\r\n    else {\r\n      chosen = {\r\n        byte: parseInt(evt.target.getAttribute('data-cursor-idx')),\r\n        bit: -1\r\n      }\r\n    }\r\n\r\n    if (this.tempSelection.byte + this.tempSelection.bit / 10 > chosen.byte + chosen.bit / 10) {\r\n      this.setSelection({\r\n        start: chosen.byte,\r\n        startBit: chosen.bit,\r\n        end: this.tempSelection.byte,\r\n        endBit: this.tempSelection.bit\r\n      })\r\n    } else {\r\n      this.setSelection({\r\n        start: this.tempSelection.byte,\r\n        startBit: this.tempSelection.bit,\r\n        end: chosen.byte,\r\n        endBit: chosen.bit\r\n      })\r\n    }\r\n\r\n    this.tempSelection = null;\r\n    this.cursor = chosen.byte;\r\n    this.bit = chosen.bit;\r\n\r\n    this.hexCursorChanged.emit({byte: this.cursor, bit: this.bit});\r\n    this.hexSelectionChanged.emit(this.selection);\r\n\r\n    if (this.editController.isInProgress) {\r\n      this.editController.commit();\r\n      this.hexDataChanged.emit();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This must be an arrow function so it retains the reference to\r\n   * \"this\" while also not being anonymous. This allows it to be\r\n   * added as an eventlistener directly while retaining the ability\r\n   * to remove it.\r\n   *\r\n   * @memberof MyComponent\r\n   */\r\n  wheel = (evt: WheelEvent) => {\r\n    evt.preventDefault();\r\n\r\n    let scaledVelocity = (!Number.isInteger(evt.deltaY)) ? Math.ceil(evt.deltaY / 100) : Math.ceil(evt.deltaY / 2);\r\n    if (scaledVelocity === -0) scaledVelocity -= 1;\r\n    if (Math.abs(evt.deltaY) > 70) scaledVelocity *= 0.10;\r\n\r\n    if (evt.ctrlKey && evt.shiftKey) scaledVelocity = Math.sign(scaledVelocity) * this.maxLines;\r\n    else if (evt.shiftKey) scaledVelocity = Math.sign(scaledVelocity);\r\n    else if (evt.ctrlKey) scaledVelocity *= 20;\r\n    document.getElementById('tooltip').setAttribute('active', 'false')\r\n\r\n    if (this.lineNumber + scaledVelocity < 0) this.lineNumber = 0;\r\n    else if (this.lineNumber + scaledVelocity > Math.floor(this.editController.length / this.bytesPerLine) - 1) this.lineNumber = Math.floor(this.editController.length / this.bytesPerLine) - 1;\r\n    else this.lineNumber += scaledVelocity;\r\n  }\r\n\r\n  handleRegionKeyDown = (evt: KeyboardEvent) => {\r\n    evt.preventDefault();\r\n\r\n    console.log(evt.target);\r\n  }\r\n\r\n  render() {\r\n    let out;\r\n    if (this.displayAsChunks) out = this.showChunks()\r\n    else  out = this.showHex()\r\n\r\n    return (\r\n      <div class=\"fudgedit-container\">\r\n        {out}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  _toggleScrollListener(evt: MouseEvent) {\r\n    if (evt.type === \"mouseenter\") {\r\n      (evt.target as HTMLElement).addEventListener(\"wheel\", this.wheel, {passive: false});\r\n    }\r\n    else {\r\n      (evt.target as HTMLElement).removeEventListener(\"wheel\", this.wheel, false);\r\n    }\r\n  }\r\n}\r\n\r\n","hex-tooltip {\r\n  position: fixed;\r\n  display: none;\r\n\r\n  box-sizing: border-box;\r\n  font-size: 14px;\r\n  max-width: 400px;\r\n  padding: 5px;\r\n  border-radius: 2px;\r\n\r\n  background-color: #000;\r\n  color: white;\r\n\r\n  z-index: 1000;\r\n  pointer-events: none;\r\n  font-family: 'Courier New', Courier, monospace;\r\n  font-size: 14px \r\n}\r\n\r\nhex-tooltip:not([active=false]) {\r\n  display: block;\r\n  left: calc(var(--mouse-x) * 1px);\r\n  top: calc(var(--mouse-y) * 1px);\r\n  transition: .2s left ease, .2s top ease;\r\n}\r\n\r\nhex-tooltip[active=frozen] {\r\n  pointer-events: all;\r\n  user-select: text;\r\n  transition: none;\r\n}","import { Component, Prop, h } from \"@stencil/core\";\r\nimport { ActiveMode } from './interfaces';\r\n\r\n@Component({\r\n  tag: 'hex-tooltip',\r\n  styleUrl: 'tooltip.css',\r\n  shadow: false,\r\n})\r\nexport class Tooltip {\r\n\r\n  @Prop({attribute: 'active'}) active: ActiveMode = \"false\";\r\n  @Prop({attribute: 'complex'}) data: {[key: string]: string} | string;\r\n  @Prop({attribute: 'simple'}) simpleText: string;\r\n\r\n  render() {\r\n    // if (this.active !== \"false\") return;\r\n    const out: any[] = [];\r\n\r\n    if (this.data) {\r\n      let data = (typeof this.data === 'string') ? JSON.parse(this.data) : this.data;\r\n\r\n      if (data.name) out.push(<span>{`name: ${data.name}`}</span>,<br/>);\r\n      out.push(<span>{`size: ${data.end - data.start} [0x${data.start.toString(16)} - 0x${data.end.toString(16)}]`}</span>,<br/>);\r\n\r\n      for (const [key, value] of Object.entries(data)) {\r\n        if (['name', 'subRegions', 'start', 'end'].includes(key)) continue;\r\n        if (value !== null) {\r\n          out.push(<span>{key}: {value}</span>,<br/>);\r\n        }\r\n      }\r\n    } else if (this.simpleText) {\r\n      out.push(<span>{this.simpleText}</span>);\r\n    } else {\r\n      out.push(<span>placeholder</span>)\r\n    }\r\n\r\n    return out;\r\n  }\r\n}\r\n"],"mappings":"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"}